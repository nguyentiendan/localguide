<!DOCTYPE html>
<html >
<head>
    {% include "../common/header.jinja2" %}
    <!-- Quill start -->
	<script src="https://cdn.quilljs.com/1.3.4/quill.js"></script>
	<!--<script src="https:////cdn.quilljs.com/1.3.6/quill.min.js"></script>-->
	<!-- Quill JS Vue -->
	<script src="https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.4/dist/vue-quill-editor.js"></script>
	<!-- Include stylesheet -->
	<link href="https://cdn.quilljs.com/1.3.4/quill.core.css" rel="stylesheet">
	<!-- Theme -->
	<link href="https://cdn.quilljs.com/1.3.4/quill.snow.css" rel="stylesheet">
	<!--<link href="https://cdn.quilljs.com/1.3.4/quill.bubble.css" rel="stylesheet">-->
	<!-- Quill end -->
</head>
<body id="page-top">

{% block content %}
{% endblock %}

{% include "../common/footer.jinja2" %}
<script src="{{request.static_url('localguide:static/assets/js/common.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/file_upload.service.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/vue.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/vee-validate.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/axios.js')}}"></script> 

<script type="text/javascript">
    Vue.use(VeeValidate);
    Vue.use(VueQuillEditor);

	const STATUS_INITIAL = 0, STATUS_SAVING = 1, STATUS_SUCCESS = 2, STATUS_FAILED = 3;
	
	const uploadPhoto = new Vue({
		delimiters: ['${', '}'],
		el: '#uploadPhoto',
		data: {
			id: '',
			uid: '',
			uploadedFiles: [],
			uploadError: null,
			currentStatus: null,
			uploadFieldName: 'photos',
		},
		computed: {
			isInitial() {
				return this.currentStatus === STATUS_INITIAL;
			},
			isSaving() {
				return this.currentStatus === STATUS_SAVING;
			},
			isSuccess() {
				return this.currentStatus === STATUS_SUCCESS;
			},
			isFailed() {
				return this.currentStatus === STATUS_FAILED;
			}
		},
		created() {
			this.id = getUrlParameter('id')
			this.uid = getUrlParameter('hash')
		},
		methods: {
			reset() {
				// reset form to initial state
				this.currentStatus = STATUS_INITIAL;
				this.uploadedFiles = [];
				this.uploadError = null;
			},
			goList() {
				location.href = 'tourlist'
			},
			save(formData) {
				//console.log(formData)
				// upload data to the server
				this.currentStatus = STATUS_SAVING;
				upload(formData)
					.then(x => {
						this.uploadedFiles = [].concat(x);
						this.currentStatus = STATUS_SUCCESS;
					})
					.catch(err => {
						this.uploadError = err.response;
						this.currentStatus = STATUS_FAILED;
					});
				
			},
			filesChange(fieldName, fileList) {
				// handle file changes
				var formData = new FormData();
				for ( i=0; i<fileList.length; i++ ) {
					size = fileList[i].size;
					type = fileList[i].type;
					if ( !this.validate_img(type, size) ) {
						//alert('File size too large OR not image file');	
						return;
					}
				}
				if ( !fileList.length || fileList.length > 5 ) {
					alert('Please upload 5 files once time');						
					return;
				}
				
				// append the files to FormData
				Array
					.from(Array(fileList.length).keys())
					.map(x => {
						formData.append(fieldName, fileList[x], fileList[x].name);
					});
				formData.append('id', this.id);
				formData.append('uid', this.uid);				
				// save it
				this.save(formData);
			},			
			validate_img(type,size) {
				if (! /\/(jpg|jpeg|png|gif)$/i.test(type)) {
					alert('Please upload image file')
					return false;
      			} else if (size > 5242880 ) { //5M
				  	alert('File size too big. Please upload file size less than 5Mb')
					return false;
				}
				return true
			},
		},
		mounted() {
			this.reset();
		},	
	});

	const tourUpdateForm = new Vue({
		delimiters: ['${', '}'],
        el: '#tourUpdateForm',
        data: {
			isEditing: false,
			success: false,
			countries: [],
			count_city:'',
			cityData: {
               Japan: [
                    { name: 'Tokyo', value: 'Tokyo' },
					{ name: 'Osaka', value: 'Osaka' },
					{ name: 'Nagoya', value: 'Nagoya' },
					{ name: 'Kyoto', value: 'Kyoto' },
					{ name: 'Hiroshima', value: 'Hiroshima' },
					{ name: 'Hokkaido', value: 'Hokkaido' },
               ],
               VietNam: [
                   { name: 'SaiGon', value: 'SaiGon' },
                   { name: 'DaNang', value: 'DaNang' },
               ]
           	},
			tour: {
				id: "{{tour.id}}",
				uid: "{{tour.uid}}",
				title: "",
				type: "",
            	short_desc: "",
				country:'{{tour.country}}',
				city:'{{tour.city}}',
				price:"",
				days:"",
				content: '{{tour.content|safe}}',
			},
			editorOption: {
				syntax: true,
				placeholder: 'Please update your content',
				theme: 'snow',
				modules: {
					toolbar: {
						container: [
							[{ 'header': [1, 2, 3, 4, 5, 6, false] }],
							['bold', 'italic', 'underline', 'strike'],
							[{ 'color': [] }, { 'background': [] }], 
							[{ 'align': [] }],
							[{ 'list': 'ordered' }, { 'list': 'bullet' }],
							['link',  'video'],
							['blockquote'],
							['clean']  
						],
					},
				},
			},
        },
		created() {
			this.getCountry()
			if (this.tour.city != 'None' || this.tour.city != '')
				this.count_city = 1		
		},
		computed: {
			options: function() {
        		let options = ''
                switch(this.tour.country) {
                    case 'Japan':
                    	options = this.cityData.Japan
                    	break;                    
                    case 'VietNam':
                    	options = this.cityData.VietNam
                    	break;
                    //default:
                    //	options = this.cityData.Japan
                }
                return options
           }
    	},
		components: {
			LocalQuillEditor: VueQuillEditor.quillEditor
		},
        methods: {
			getCountry() {
				axios.get(URL + 'static/js/country.json').then(response => {
					this.countries = response.data
				})
      		},
			onChange() {
            	this.options = this.options
				this.count_city = this.options.length
         	},
			processForm(evt) {
				this.isEditing = !this.isEditing;
				evt.preventDefault()
        		//attempt validating all
                this.$validator.validateAll().then((result) => {
                    if (result) {
						this.tour.title			= this.$refs['title'].value;
						this.tour.type			= this.$refs['type'].value;
						this.tour.short_desc	= this.$refs['short_desc'].value;
						this.tour.price			= this.$refs['price'].value;
						this.tour.days			= this.$refs['days'].value;
						this.tour.content		= this.$refs['content'].value;
						//validation passed succesfully
						axios({
							method: 'POST',
							url: URL + 'tour/updateTour',
							data: this.tour,
							config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
						})
						.then(function (response) {
							//handle success
							if (response.status == '200' && response.statusText == 'OK') {
								//tourUpdateForm.showModal()
								location.reload();
								//location.href = '/tour/list'
							}
						})
						.catch(function (response) {
							//handle error
							//console.log(response);
						});
                    }
                });
            },
			back() {
				location.href = 'tourlist'
			}
        }	
    });

	const bannerUpload = new Vue({
        el: '#bannerUpload',
		validator: null,
        data: {	
			id: '{{tour.id}}',
			uid: '{{tour.uid}}',
			uploadfile: '',
        },
        methods: {
			file_open () {
				this.$refs.file.click()
			},
			filesChange(e) {
				e.preventDefault();
				//let file_name = this.$refs.file.files[0].name;
				//let file_size = this.$refs.file.files[0].size;
				if(!this.validate_img(this.$refs.file.files[0])) {
					alert('File size too large or not image file')	
				} else {
					this.uploadfile = this.$refs.file.files[0]
					
					//let formData = new FormData();
      				//formData.append('file', this.uploadfile);
      				//console.log('>> formData >> ', formData);
					let formData = new FormData();
					formData.append('photo', this.uploadfile);
					formData.append('id', this.id);
					formData.append('hash', this.uid);
					console.log('>> formData >> ', formData);
					
					axios({
						method: 'POST',
						url: URL + 'tour/uploadImage',
						data: formData, 
						headers: {'Content-Type': 'multipart/form-data'} 
					})
					.then(function (response) {
						//handle success
						if (response.status == '200' && response.statusText == 'OK') {
							//alert("UPLOAD SUCCESS")
							location.reload() 
						}
					})
					.catch(function (response) {
						//handle error
						console.log(response);
					});
				}
			},	
			validate_img (f) {
				if (f.name == '') {
					alert('No file chosen');
					return false;
				} else if (! /\.(jpg|jpeg|png|gif)$/i.test(f.name)) {
        			alert('Please choose image');
					return false;
      			} else if (f.size > 1024 * 1024) {
					alert('File too big (> 1MB)');
					return false;
				}
				return true
			}
        }	
    });

	const tour_disable = new Vue({
		delimiters: ['${', '}'],
        el: '#tour_disable',
		data: {
			tour: {
				id:'{{tour.id}}',
				uid:'{{tour.uid}}',
			},
		},
		methods: {
			tour_disable() {
				axios({
					method: 'POST',
					url: URL + 'admin/tour_disable',
					data: this.tour,
					config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
				})
				.then(function (response) {
					//handle success
					if (response.status == '200' && response.statusText == 'OK') {
						location.reload();
					}
				})
				.catch(function (response) {
					//handle error
					console.log(response);
				});
			},
		}		
	});	

	const tour_enable = new Vue({
		delimiters: ['${', '}'],
        el: '#tour_enable',
		data: {
			tour: {
				id:'{{tour.id}}',
				uid:'{{tour.uid}}',
			},
		},
		methods: {
			tour_enable() {
				axios({
					method: 'POST',
					url: URL + 'admin/tour_enable',
					data: this.tour,
					config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
				})
				.then(function (response) {
					//handle success
					if (response.status == '200' && response.statusText == 'OK') {
						location.reload();
					}
				})
				.catch(function (response) {
					//handle error
					console.log(response);
				});
			},
		}		
	});	

	const tour_delete = new Vue({
		delimiters: ['${', '}'],
        el: '#tour_delete',
		data: {
			tour: {
				id:'{{tour.id}}',
				uid:'{{tour.uid}}',
			},
		},
		methods: {
			tour_delete() {
				axios({
					method: 'POST',
					url: URL + 'admin/tour_delete',
					data: this.tour,
					config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
				})
				.then(function (response) {
					//handle success
					if (response.status == '200' && response.statusText == 'OK') {
						location.href = 'tourlist'
					}
				})
				.catch(function (response) {
					//handle error
					console.log(response);
				});
			},
		}		
	});

	const tour_requestactive = new Vue({
		delimiters: ['${', '}'],
        el: '#tour_requestactive',
		data: {
			tour: {
				id:'{{tour.id}}',
				uid:'{{tour.uid}}',
			},
		},
		methods: {
			tour_requestactive() {
				axios({
					method: 'POST',
					url: URL + 'admin/tour_requestactive',
					data: this.tour,
					config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
				})
				.then(function (response) {
					//handle success
					if (response.status == '200' && response.statusText == 'OK') {
						location.href = 'tourlist'
					}
				})
				.catch(function (response) {
					//handle error
					console.log(response);
				});
			},
		}		
	});	

	const tour_active = new Vue({
		delimiters: ['${', '}'],
        el: '#tour_active',
		data: {
			tour: {
				id:'{{tour.id}}',
				uid:'{{tour.uid}}',
			},
		},
		methods: {
			tour_active() {
				axios({
					method: 'POST',
					url: URL + 'admin/tour_active',
					data: this.tour,
					config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
				})
				.then(function (response) {
					//handle success
					if (response.status == '200' && response.statusText == 'OK') {
						location.href = 'tourlist'
					}
				})
				.catch(function (response) {
					//handle error
					console.log(response);
				});
			},
		}		
	});	

	const tour_restore = new Vue({
		delimiters: ['${', '}'],
        el: '#tour_restore',
		data: {
			tour: {
				id:'{{tour.id}}',
				uid:'{{tour.uid}}',
			},
		},
		methods: {
			tour_restore() {
				axios({
					method: 'POST',
					url: URL + 'admin/tour_restore',
					data: this.tour,
					config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
				})
				.then(function (response) {
					//handle success
					if (response.status == '200' && response.statusText == 'OK') {
						location.href = 'tourlist'
					}
				})
				.catch(function (response) {
					//handle error
					console.log(response);
				});
			},
		}		
	});	
</script>

</body>
</html>