<!DOCTYPE html>
<html >
<head>
    {% include "../common/header.jinja2" %}
    <!-- Quill start -->
	<script src="https://cdn.quilljs.com/1.3.4/quill.js"></script>
	<!--<script src="https:////cdn.quilljs.com/1.3.6/quill.min.js"></script>-->
	<!-- Quill JS Vue -->
	<script src="https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.4/dist/vue-quill-editor.js"></script>
	<!-- Include stylesheet -->
	<link href="https://cdn.quilljs.com/1.3.4/quill.core.css" rel="stylesheet">
	<!-- Theme -->
	<link href="https://cdn.quilljs.com/1.3.4/quill.snow.css" rel="stylesheet">
	<!--<link href="https://cdn.quilljs.com/1.3.4/quill.bubble.css" rel="stylesheet">-->
	<!-- Quill end -->
	<!--<link rel="stylesheet" href="{{request.static_url('localguide:static/adassets/css/style.css')}}">-->
	<style>
		/*body {
			margin-bottom: 40px;
			margin-top: 40px;
			text-align: center;
			font-size: 14px;
			font-family: 'Roboto', sans-serif;
			background:url(http://www.digiphotohub.com/wp-content/uploads/2015/09/bigstock-Abstract-Blurred-Background-Of-92820527.jpg);
		}*/
			
		#wrap {
			width: 1100px;
			margin: 0 auto;
			}
			
		#external-events {
			float: left;
			width: 150px;
			padding: 0 10px;
			text-align: left;
			}
			
		#external-events h4 {
			font-size: 16px;
			margin-top: 0;
			padding-top: 1em;
			}
			
		.external-event { /* try to mimick the look of a real event */
			margin: 10px 0;
			padding: 2px 4px;
			background: #3366CC;
			color: #fff;
			font-size: .85em;
			cursor: pointer;
			}
			
		#external-events p {
			margin: 1.5em 0;
			font-size: 11px;
			color: #666;
			}
			
		#external-events p input {
			margin: 0;
			vertical-align: middle;
			}

		#calendar {
			/*float: right; */
			margin: 0 auto;
			width: 900px;
			background-color: #FFFFFF;
			border-radius: 6px;
			box-shadow: 0 1px 2px #C3C3C3;
			-webkit-box-shadow: 0px 0px 21px 2px rgba(0,0,0,0.18);
			-moz-box-shadow: 0px 0px 21px 2px rgba(0,0,0,0.18);
			box-shadow: 0px 0px 21px 2px rgba(0,0,0,0.18);
		}

	</style>

</head>
<body id="page-top">

{% block content %}
{% endblock %}

{% include "../common/footer.jinja2" %}
<script src="{{request.static_url('localguide:static/assets/js/common.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/file_upload.service.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/vue.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/vee-validate.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/axios.js')}}"></script> 
<script src="{{request.static_url('localguide:static/adassets/js/calendar.js')}}"></script>

<script type="text/javascript">
    Vue.use(VeeValidate);
    Vue.use(VueQuillEditor);
	
	const STATUS_INITIAL = 0, STATUS_SAVING = 1, STATUS_SUCCESS = 2, STATUS_FAILED = 3;
	
	const uploadPhoto = new Vue({
		delimiters: ['${', '}'],
		el: '#uploadPhoto',
		data: {
			id: '',
			uid: '',
			uploadedFiles: [],
			uploadError: null,
			currentStatus: null,
			uploadFieldName: 'photos',
		},
		computed: {
			isInitial() {
				return this.currentStatus === STATUS_INITIAL;
			},
			isSaving() {
				return this.currentStatus === STATUS_SAVING;
			},
			isSuccess() {
				return this.currentStatus === STATUS_SUCCESS;
			},
			isFailed() {
				return this.currentStatus === STATUS_FAILED;
			}
		},
		created() {
			this.id = getUrlParameter('id')
			this.uid = getUrlParameter('hash')
		},
		methods: {
			reset() {
				// reset form to initial state
				this.currentStatus = STATUS_INITIAL;
				this.uploadedFiles = [];
				this.uploadError = null;
			},
			setting_calendar() {
				this.id = getUrlParameter('id')
				this.uid = getUrlParameter('hash')
				console.log(this.id)
				console.log(this.uid)
				location.href = 'calendar?id=' + this.id + '&hash=' + this.uid;
			},
			goList() {
				location.href = 'tourlist'
			},
			save(formData) {
				//console.log(formData)
				// upload data to the server
				this.currentStatus = STATUS_SAVING;
				upload(formData)
					.then(x => {
						this.uploadedFiles = [].concat(x);
						this.currentStatus = STATUS_SUCCESS;
					})
					.catch(err => {
						this.uploadError = err.response;
						this.currentStatus = STATUS_FAILED;
					});
				
			},
			filesChange(fieldName, fileList) {
				// handle file changes
				var formData = new FormData();
				for ( i=0; i<fileList.length; i++ ) {
					size = fileList[i].size;
					type = fileList[i].type;
					if ( !this.validate_img(type, size) ) {
						//alert('File size too large OR not image file');	
						return;
					}
				}
				if ( !fileList.length || fileList.length > 5 ) {
					alert('Please upload 5 files once time');						
					return;
				}
				
				// append the files to FormData
				Array
					.from(Array(fileList.length).keys())
					.map(x => {
						formData.append(fieldName, fileList[x], fileList[x].name);
					});
				formData.append('id', this.id);
				formData.append('uid', this.uid);				
				// save it
				this.save(formData);
			},			
			validate_img(type,size) {
				if (! /\/(jpg|jpeg|png|gif)$/i.test(type)) {
					alert('Please upload image file')
					return false;
      			} else if (size > 5242880 ) { //5M
				  	alert('File size too big. Please upload file size less than 5Mb')
					return false;
				}
				return true
			},
		},
		mounted() {
			this.reset();
		},	
	});

	const tourList = new Vue({
		el: '#tourList',
		data: {},
		methods: {
			goEdit(id,uid) {
				location.href = 'edit?id=' + id + '&uid=' + uid;
			},
			goDelete(id,uid) {
				var conf = confirm("Are you sure. You can't restore.")
				if (conf) {
					axios({
						method: 'POST',
						url: URL + 'tour/deleteTour',
						data: {id: id, uid: uid},
						config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
					})
					.then(function (response) {
						//handle success
						if (response.status == '200' && response.statusText == 'OK') {
							location.reload() 
						}
					})
					.catch(function (response) {
						//handle error
						//console.log(response);
					});
				}
			},
		}	
	});	

    const tourCreateForm = new Vue({
		delimiters: ['${', '}'],
        el: '#tourCreateForm',
        data: {
			success: false,
			countries: [],
			count_city:'',
			cityData: {
               Japan: [
                    { name: 'Tokyo', value: 'Tokyo' },
					{ name: 'Osaka', value: 'Osaka' },
					{ name: 'Nagoya', value: 'Nagoya' },
					{ name: 'Kyoto', value: 'Kyoto' },
					{ name: 'Hiroshima', value: 'Hiroshima' },
					{ name: 'Hokkaido', value: 'Hokkaido' },
               ],
               VietNam: [
                   { name: 'SaiGon', value: 'SaiGon' },
                   { name: 'DaNang', value: 'DaNang' },
               ],
           	},
			tour: {
				title:'',
				type: '',
            	short_desc: '',
				country:'',
				city:'',
				price:'',
				days:'',
				content:'',
			},
			editorOption: {
				syntax: true,
				placeholder: 'Please input your content',
				theme: 'snow',
				modules: {
					toolbar: {
						container: [
							[{ 'header': [1, 2, 3, 4, 5, 6, false] }],
							['bold', 'italic', 'underline', 'strike'],
							[{ 'color': [] }, { 'background': [] }], 
							[{ 'align': [] }],
							[{ 'list': 'ordered' }, { 'list': 'bullet' }],
							['link', 'video'],
							['blockquote'],
							['clean']  
						],
					},
				},
			},
        },
		created() {
			this.getCountry()
			if (this.tour.city != 'None' || this.tour.city != '')
				this.count_city = 1		
		},
		computed: {
			options: function() {
        		let options = ''
                switch(this.tour.country) {
                    case 'Japan':
                    	options = this.cityData.Japan
                    	break;                    
                    case 'VietNam':
                    	options = this.cityData.VietNam
                    	break;
                    //default:
                    //	options = this.cityData.Japan
                }
                return options
           }
    	},
		components: {
			LocalQuillEditor: VueQuillEditor.quillEditor
		},
        methods: {
			getCountry() {
				axios.get(URL + 'static/js/country.json').then(response => {
					this.countries = response.data
				})
      		},
			onChange() {
            	this.options = this.options
				this.count_city = this.options.length
         	},
			processForm(evt) {
				evt.preventDefault()
        		//attempt validating all
                this.$validator.validateAll().then((result) => {
                    if (result) {
						//validation passed succesfully
						let formData = new FormData();
						formData.append('title', this.$refs['title'].value);
						formData.append('type', this.$refs['type'].value);
						formData.append('short_desc', this.$refs['short_desc'].value);
						formData.append('price', this.$refs['price'].value);
						formData.append('days', this.$refs['days'].value);
						formData.append('content', this.$refs['content'].value);
						formData.append('country', this.$refs['country'].value);
						formData.append('city', this.$refs['city'].value);
						formData.append('banner', this.$refs.file.files[0]);
						//console.log('>> formData >> ', formData);
						axios({
							method: 'POST',
							url: URL + 'tour/create',
							data: formData,
							headers: {'Content-Type': 'multipart/form-data'} 
						})
						.then(function (response) {
							//handle success
							if (response.status == '200' && response.statusText == 'OK') {
								console.log(response)
								if(response.data!='') {
									location.href = response.data  
								}
								//tourCreateForm.showModal()
							}
						})
						.catch(function (response) {
							//handle error
						});
                    }
                });
            },
			tourList() {
				location.href = 'tourlist'
			}
        }	
    });
</script>
<script>
	$(document).ready(function() {
	    var date = new Date();
		var d = date.getDate();
		var m = date.getMonth();
		var y = date.getFullYear();
		
		/*  className colors
		className: default(transparent), important(red), chill(pink), success(green), info(blue)
		*/		
		
		  
		/* initialize the external events
		-----------------------------------------------------------------*/
	
		$('#external-events div.external-event').each(function() {
		
			// create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
			// it doesn't need to have a start or end
			var eventObject = {
				title: $.trim($(this).text()) // use the element's text as the event title
			};
			
			// store the Event Object in the DOM element so we can get to it later
			$(this).data('eventObject', eventObject);
			
			// make the event draggable using jQuery UI
			$(this).draggable({
				zIndex: 999,
				revert: true,      // will cause the event to go back to its
				revertDuration: 0  //  original position after the drag
			});
			
		});
	
		/* initialize the calendar
		-----------------------------------------------------------------*/	
		var calendar =  $('#calendar').fullCalendar({
			header: {
				left: 'title',
				center: 'agendaDay,agendaWeek,month',
				right: 'prev,next today'
			},
			editable: true,
			firstDay: 1, //  1(Monday) this can be changed to 0(Sunday) for the USA system
			selectable: true,
			defaultView: 'month',
			
			axisFormat: 'h:mm',
			columnFormat: {
                month: 'ddd',    // Mon
                week: 'ddd d', // Mon 7
                day: 'dddd M/d',  // Monday 9/7
                agendaDay: 'dddd d'
            },
            titleFormat: {
                month: 'MMMM yyyy', // September 2009
                week: "MMMM yyyy", // September 2009
                day: 'MMMM yyyy'                  // Tuesday, Sep 8, 2009
            },
			allDaySlot: false,
			selectHelper: true,
			select: function(start, end, allDay) {
                var title = prompt('Please input tour title');
				if (title) {
					calendar.fullCalendar('renderEvent',
						{
							title: title,
							start: start,
							end: end,
							allDay: allDay
						},
						true // make the event "stick"
					);
					var id = getUrlParameter('id')
					var uid = getUrlParameter('hash')
					axios({
						method: 'POST',
						url: URL + 'admin/test',
						data: {id:id, uid:uid, title: title},
						config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
					})
					.then(function (response) {
						//handle success
						if (response.status == '200' && response.statusText == 'OK') {
							console.log(response)
						}
					})
					.catch(function (response) {
						//handle error
					});
				}
				calendar.fullCalendar('unselect');
			},
			/*
			droppable: true, // this allows things to be dropped onto the calendar !!!
			drop: function(date, allDay) { // this function is called when something is dropped
			
				// retrieve the dropped element's stored Event Object
				var originalEventObject = $(this).data('eventObject');
				
				// we need to copy it, so that multiple events don't have a reference to the same object
				var copiedEventObject = $.extend({}, originalEventObject);
				
				// assign it the date that was reported
				copiedEventObject.start = date;
				copiedEventObject.allDay = allDay;
				
				// render the event on the calendar
				// the last `true` argument determines if the event "sticks" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
				$('#calendar').fullCalendar('renderEvent', copiedEventObject, true);
				
				// is the "remove after drop" checkbox checked?
				if ($('#drop-remove').is(':checked')) {
					// if so, remove the element from the "Draggable Events" list
					$(this).remove();
				}	
			},
			*/

			/*
			events: [
				{
					title: 'All Day Event',
					start: new Date(y, m, 1)
				},
				{
					id: 999,
					title: 'Repeating Event',
					start: new Date(y, m, d-3, 16, 0),
					allDay: false,
					className: 'info'
				},
				{
					id: 999,
					title: 'Repeating Event',
					start: new Date(y, m, d+4, 16, 0),
					allDay: false,
					className: 'info'
				},
				{
					title: 'Meeting',
					start: new Date(y, m, d, 10, 30),
					allDay: false,
					className: 'important'
				},
				{
					title: 'Lunch',
					start: new Date(y, m, d, 12, 0),
					end: new Date(y, m, d, 14, 0),
					allDay: false,
					className: 'important'
				},
				{
					title: 'Birthday Party',
					start: new Date(y, m, d+1, 19, 0),
					end: new Date(y, m, d+1, 22, 30),
					allDay: false,
				},
				{
					title: 'Click for Google',
					start: new Date(y, m, 28),
					end: new Date(y, m, 29),
					url: 'https://ccp.cloudaccess.net/aff.php?aff=5188',
					className: 'success'
				}
			],
			*/

		});	
	});

</script>

</body>
</html>