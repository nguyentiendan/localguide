<!DOCTYPE html>
<html >
<head>
    {% include "../common/header.jinja2" %}
    <title>Tour setting</title>
	<!-- Quill start -->
	<script src="https://cdn.quilljs.com/1.3.4/quill.js"></script>
	<!--<script src="https:////cdn.quilljs.com/1.3.6/quill.min.js"></script>-->
	<!-- Quill JS Vue -->
	<script src="https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.4/dist/vue-quill-editor.js"></script>
	<!-- Include stylesheet -->
	<link href="https://cdn.quilljs.com/1.3.4/quill.core.css" rel="stylesheet">
	<!-- Theme -->
	<link href="https://cdn.quilljs.com/1.3.4/quill.snow.css" rel="stylesheet">
	<!--<link href="https://cdn.quilljs.com/1.3.4/quill.bubble.css" rel="stylesheet">-->
	<!-- Quill end -->
	<link rel="stylesheet" href="{{request.static_url('localguide:static/assets/theme/css/sidebar.css')}}">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
	
</head>
<body>
{% include "../common/navbar_default.jinja2" %}

{% if role == '2' :%}
	<div class="container-full" style="padding-top:150px; padding-bottom:200px">
{% else :%}
	<div class="container" style="padding-top:150px; padding-bottom:200px">
{% endif %}

	<div class="row">
        {% if role == '2' :%}
        	<div class="col-md-2">
		{% else :%}
			<div class="col-md-3">
		{% endif %}
		{% include "../common/sidebar.jinja2" %}
			</div>
		{% if role == '2' :%}
			<div class="col-md-10">
		{% else :%}
			<div class="col-md-9">
		{% endif %}
			{% block content %}{% endblock %}
			</div>
	</div>
</div>

{% include "../common/footer.jinja2" %}

<script src="{{request.static_url('localguide:static/assets/js/image_resize.min.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/common.js')}}"></script>
<!--<script src="{{request.static_url('localguide:static/assets/js/file_upload.fake.service.js')}}"></script>-->
<script src="{{request.static_url('localguide:static/assets/js/file_upload.service.js')}}"></script>
<script>
	// Notify vue about the VeeValidate plugin
 	Vue.use(VeeValidate);
	//Vue.use(VueQuillEditor);
	
	const STATUS_INITIAL = 0, STATUS_SAVING = 1, STATUS_SUCCESS = 2, STATUS_FAILED = 3;
	
	const uploadPhoto = new Vue({
		delimiters: ['${', '}'],
		el: '#uploadPhoto',
		data: {
			id: '',
			uid: '',
			uploadedFiles: [],
			uploadError: null,
			currentStatus: null,
			uploadFieldName: 'photos',
		},
		computed: {
			isInitial() {
				return this.currentStatus === STATUS_INITIAL;
			},
			isSaving() {
				return this.currentStatus === STATUS_SAVING;
			},
			isSuccess() {
				return this.currentStatus === STATUS_SUCCESS;
			},
			isFailed() {
				return this.currentStatus === STATUS_FAILED;
			}
		},
		created() {
			this.id = getUrlParameter('id')
			this.uid = getUrlParameter('hash')
		},
		methods: {
			reset() {
				// reset form to initial state
				this.currentStatus = STATUS_INITIAL;
				this.uploadedFiles = [];
				this.uploadError = null;
			},
			goList() {
				location.href = 'list'
			},
			save(formData) {
				//console.log(formData)
				// upload data to the server
				this.currentStatus = STATUS_SAVING;
				upload(formData)
					.then(x => {
						this.uploadedFiles = [].concat(x);
						this.currentStatus = STATUS_SUCCESS;
					})
					.catch(err => {
						this.uploadError = err.response;
						this.currentStatus = STATUS_FAILED;
					});
				
			},
			filesChange(fieldName, fileList) {
				// handle file changes
				var formData = new FormData();
				for ( i=0; i<fileList.length; i++ ) {
					size = fileList[i].size;
					type = fileList[i].type;
					if ( !this.validate_img(type, size) ) {
						//alert('File size too large OR not image file');	
						return;
					}
				}
				if ( !fileList.length || fileList.length > 5 ) {
					alert('Please upload 5 files once time');						
					return;
				}
				
				// append the files to FormData
				Array
					.from(Array(fileList.length).keys())
					.map(x => {
						formData.append(fieldName, fileList[x], fileList[x].name);
					});
				formData.append('id', this.id);
				formData.append('uid', this.uid);				
				// save it
				this.save(formData);
			},			
			validate_img(type,size) {
				if (! /\/(jpg|jpeg|png|gif)$/i.test(type)) {
					alert('Please upload image file')
					return false;
      			} else if (size > 5242880 ) { //5M
				  	alert('File size too big. Please upload file size less than 5Mb')
					return false;
				}
				return true
			},
		},
		mounted() {
			this.reset();
		},	
	});


	const tourList = new Vue({
		el: '#tourList',
		data: {},
		methods: {
			goEdit(id,uid) {
				location.href = '/tour/edit?id=' + id + '&uid=' + uid;
			},
			goDelete(id,uid) {
				var conf = confirm("Are you sure. You can't restore.")
				if (conf) {
					axios({
						method: 'POST',
						url: URL + 'tour/deleteTour',
						data: {id: id, uid: uid},
						config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
					})
					.then(function (response) {
						//handle success
						if (response.status == '200' && response.statusText == 'OK') {
							location.reload() 
						}
					})
					.catch(function (response) {
						//handle error
						//console.log(response);
					});
				}
			},
		}	
	});	

	const tourCreateForm = new Vue({
		delimiters: ['${', '}'],
        el: '#tourCreateForm',
        data: {
			success: false,
			//country: '',
			//city: '',
			countries: [],
			count_city:'',
			cityData: {
               Japan: [
                    { name: 'Tokyo', value: 'Tokyo' },
					{ name: 'Osaka', value: 'Osaka' },
					{ name: 'Nagoya', value: 'Nagoya' },
					{ name: 'Kyoto', value: 'Kyoto' },
					{ name: 'Hiroshima', value: 'Hiroshima' },
					{ name: 'Hokkaido', value: 'Hokkaido' },
               ],
               VietNam: [
                   { name: 'SaiGon', value: 'SaiGon' },
                   { name: 'DaNang', value: 'DaNang' },
               ],
           	},
			tour: {
				title:'',
				type: '',
            	short_desc: '',
				country:'',
				city:'',
				price:'',
				days:'',
				content:'',
			},
			editorOption: {
				syntax: true,
				placeholder: 'Please update your content',
				theme: 'snow',
				modules: {
					imageResize: {
          				displaySize: true
        			},
					toolbar: {
						container: [
							[{ 'header': [1, 2, 3, 4, 5, 6, false] }],
							['bold', 'italic', 'underline', 'strike'],
							[{ 'color': [] }, { 'background': [] }], 
							[{ 'align': [] }],
							[{ 'list': 'ordered' }, { 'list': 'bullet' }],
							['link', 'image', 'video'],
							['blockquote'],
							['clean']  
						],
						handlers: {
							image: imageHandler
						}
					},
				},
			},
        },
		created() {
			this.getCountry()
			if (this.tour.city != 'None' || this.tour.city != '')
				this.count_city = 1		
		},
		computed: {
			options: function() {
        		let options = ''
                switch(this.tour.country) {
                    case 'Japan':
                    	options = this.cityData.Japan
                    	break;                    
                    case 'VietNam':
                    	options = this.cityData.VietNam
                    	break;
                    //default:
                    //	options = this.cityData.Japan
                }
                return options
           }
    	},
		components: {
			LocalQuillEditor: VueQuillEditor.quillEditor
		},
        methods: {
			getCountry() {
				axios.get(URL + 'static/js/country.json').then(response => {
					this.countries = response.data
				})
      		},
			onChange: function () {
            	this.options = this.options
				this.count_city = this.options.length
         	},
			processForm(evt) {
				evt.preventDefault()
        		//attempt validating all
                this.$validator.validateAll().then((result) => {
                    if (result) {
						//validation passed succesfully
						let formData = new FormData();
						formData.append('title', this.$refs['title'].value);
						formData.append('type', this.$refs['type'].value);
						formData.append('short_desc', this.$refs['short_desc'].value);
						formData.append('price', this.$refs['price'].value);
						formData.append('days', this.$refs['days'].value);
						formData.append('content', this.$refs['content'].value);
						formData.append('country', this.$refs['country'].value);
						formData.append('city', this.$refs['city'].value);
						formData.append('banner', this.$refs.file.files[0]);
						//console.log('>> formData >> ', formData);
						axios({
							method: 'POST',
							url: URL + 'tour/create',
							data: formData,
							headers: {'Content-Type': 'multipart/form-data'} 
						})
						.then(function (response) {
							//handle success
							if (response.status == '200' && response.statusText == 'OK') {
								//console.log('SUCCESS')
								console.log(response)
								if(response.data!='') {
									location.href = response.data  
								}
								//tourCreateForm.showModal()
							}
						})
						.catch(function (response) {
							//handle error
							//console.log(response);
						});
                    }
                });
            },
			back() {
				window.history.back();
			}
        }	
    });
	
</script>
</body>
</html>