<!DOCTYPE html>
<html >
<head>
    {% include "../common/header.jinja2" %}
    <title>Tour setting</title>
	<!-- Quill start -->
	<script src="https://cdn.quilljs.com/1.3.4/quill.js"></script>
	<!--<script src="https:////cdn.quilljs.com/1.3.6/quill.min.js"></script>-->
	<!-- Quill JS Vue -->
	<script src="https://cdn.jsdelivr.net/npm/vue-quill-editor@3.0.4/dist/vue-quill-editor.js"></script>
	<!-- Include stylesheet -->
	<link href="https://cdn.quilljs.com/1.3.4/quill.core.css" rel="stylesheet">
	<!-- Theme -->
	<link href="https://cdn.quilljs.com/1.3.4/quill.snow.css" rel="stylesheet">
	<!--<link href="https://cdn.quilljs.com/1.3.4/quill.bubble.css" rel="stylesheet">-->
	<!-- Quill end -->
	<link rel="stylesheet" href="{{request.static_url('localguide:static/assets/theme/css/sidebar.css')}}">
	
</head>
<body>
{% include "../common/navbar_default.jinja2" %}

{% if role == '2' :%}
	<div class="container-full" style="padding-top:150px; padding-bottom:200px">
{% else :%}
	<div class="container" style="padding-top:150px; padding-bottom:200px">
{% endif %}
	<div class="row">
        <div class="col-md-3">
			{% include "../common/sidebar.jinja2" %}
		</div>
		<div class="col">
			{% block content %}{% endblock %}
		</div>
	</div>
</div>

{% include "../common/footer.jinja2" %}

<script src="{{request.static_url('localguide:static/assets/js/image_resize.min.js')}}"></script>
<script src="{{request.static_url('localguide:static/assets/js/common.js')}}"></script>
<script>
	// Notify vue about the VeeValidate plugin
 	Vue.use(VeeValidate);
	//Vue.use(bootstrapVue);	
	Vue.use(VueQuillEditor);
	
	const tourUpdateForm = new Vue({
		delimiters: ['${', '}'],
        el: '#tourUpdateForm',
        data: {
			isEditing: false,
			success: false,
			//country: '',
			//city: '',
			countries: 
				[
  					{ name: 'Japan', code: 'JP' },
  					{ name: 'VietNam', code: 'VN' },
				],
			count_city:'',
			cityData: {
               Japan: [
                    { name: 'Tokyo', value: 'Tokyo' },
					{ name: 'Osaka', value: 'Osaka' },
					{ name: 'Nagoya', value: 'Nagoya' },
					{ name: 'Kyoto', value: 'Kyoto' },
					{ name: 'Hiroshima', value: 'Hiroshima' },
					{ name: 'Hokkaido', value: 'Hokkaido' },
               ],
               VietNam: [
                   { name: 'SaiGon', value: 'SaiGon' },
                   { name: 'DaNang', value: 'DaNang' },
               ]
           	},
			tour: {
				id: '{{tour.id}}',
				uid: '{{tour.uid}}',
				title:'{{tour.title}}',
				type: '{{tour.type}}',
            	short_desc: '{{tour.short_desc}}',
				country:'{{tour.country}}',
				city:'{{tour.city}}',
				price:'{{tour.price}}',
				days:'{{tour.days}}',
				content:'{{tour.content|safe}}',
			},
			editorOption: {
				syntax: true,
				placeholder: 'Please update your content',
				theme: 'snow',
				modules: {
					imageResize: {
          				displaySize: true
        			},
					toolbar: {
						container: [
							[{ 'header': [1, 2, 3, 4, 5, 6, false] }],
							['bold', 'italic', 'underline', 'strike'],
							[{ 'color': [] }, { 'background': [] }], 
							[{ 'align': [] }],
							[{ 'list': 'ordered' }, { 'list': 'bullet' }],
							['link', 'image', 'video'],
							['blockquote'],
							['clean']  
						],
						handlers: {
							image: imageHandler
						}
					},
				},
			},
        },
		created() {
			//this.getCountry()
			if (this.tour.city != 'None' || this.tour.city != '')
				this.count_city = 1		
		},
		computed: {
			options: function() {
        		let options = ''
                switch(this.tour.country) {
                    case 'Japan':
                    	options = this.cityData.Japan
                    	break;                    
                    case 'VietNam':
                    	options = this.cityData.VietNam
                    	break;
                    //default:
                    //	options = this.cityData.Japan
                }
                return options
           }
    	},
		components: {
			LocalQuillEditor: VueQuillEditor.quillEditor
		},
        methods: {
			//getCountry() {
			//	axios.get(URL + 'static/js/country.json').then(response => {
			//		this.countries = response.data
			//	})
      		//},
			onChange: function () {
            	this.options = this.options
				this.count_city = this.options.length
         	},
			processForm() {
				this.isEditing = !this.isEditing;
        		//attempt validating all
                this.$validator.validateAll().then((result) => {
                    if (result) {
						//validation passed succesfully
						axios({
							method: 'POST',
							url: URL + 'tour/updateTour',
							data: this.tour,
							config: { headers: {'Content-Type': 'application/json; charset=utf-8' }}
						})
						.then(function (response) {
							//handle success
							if (response.status == '200' && response.statusText == 'OK') {
								//tourUpdateForm.showModal()
								//console.log('SUCCESS')
								location.href = '/tour/list'
							}
						})
						.catch(function (response) {
							//handle error
							//console.log(response);
							alert('Redirect to error page');
						});
                    }
                });
            },
			back() {
				location.href = '/tour/list'
			}
        }	
    });

	const bannerUpload = new Vue({
        el: '#bannerUpload',
		validator: null,
        data: {	
			id: '{{tour.id}}',
			uid: '{{tour.uid}}',
			uploadfile: '',
        },
        methods: {
			file_open () {
				this.$refs.file.click()
			},
			filesChange(e) {
				e.preventDefault();
				//let file_name = this.$refs.file.files[0].name;
				//let file_size = this.$refs.file.files[0].size;
				if(!this.validate_img(this.$refs.file.files[0])) {
					alert('File size too large or not image file')	
				} else {
					this.uploadfile = this.$refs.file.files[0]
					
					//let formData = new FormData();
      				//formData.append('file', this.uploadfile);
      				//console.log('>> formData >> ', formData);
					let formData = new FormData();
					formData.append('photo', this.uploadfile);
					formData.append('id', this.id);
					formData.append('hash', this.uid);
					console.log('>> formData >> ', formData);

					axios({
						method: 'POST',
						url: URL + 'tour/uploadImage',
						data: formData, 
						headers: {'Content-Type': 'multipart/form-data'} 
					})
					.then(function (response) {
						//handle success
						if (response.status == '200' && response.statusText == 'OK') {
							//alert("UPLOAD SUCCESS")
							location.reload() 
						}
					})
					.catch(function (response) {
						//handle error
						console.log(response);
					});
				}
			},	
			validate_img (f) {
				if (f.name == '') {
					alert('No file chosen');
					return false;
				} else if (! /\.(jpg|jpeg|png|gif)$/i.test(f.name)) {
        			alert('Please choose image');
					return false;
      			} else if (f.size > 1024 * 1024) {
					alert('File too big (> 1MB)');
					return false;
				}
				return true
			}
        }	
    });

</script>
</body>
</html>